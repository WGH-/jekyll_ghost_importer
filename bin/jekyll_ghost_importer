#!/usr/bin/env ruby
#
# Copyright (C) 2017-2018 Eloy Espinaco
# 
# This program is free software: you can redistribute it and/or modify it under
# the terms of the GNU General Public License as published by the Free Software
# Foundation, either version 3 of the License, or (at your option) any later
# version.
# 
# This program is distributed in the hope that it will be useful, but WITHOUT ANY
# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
# PARTICULAR PURPOSE.  See the GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License along with
# this program.  If not, see <http://www.gnu.org/licenses/>.
# 
# If you need to use this under different terms please write me directly.

require 'fileutils'
require 'json'
require 'date'
require 'yaml'

FileUtils.mkdir_p("_posts")
FileUtils.mkdir_p("_drafts")

$json = JSON.parse File.read(ARGV.pop), symbolize_names: true

def there_are_tags?
  @tags ||=
    $json[:db] &&
    $json[:db].first[:data][:posts_tags] &&
    $json[:db].first[:data][:tags]
end

class Post
  # the source of the post
  attr_reader :post

  def initialize post
    @post = post
  end

  def import
    puts "Importing #{ filename }"
    File.write filename, full_body
  end

  def draft?
    post[:status] == 'draft'
  end

  private

  def folder
    draft? ? '_drafts' : '_posts'
  end

  def filename
    File.join folder, basename
  end

  def date
    case post[:published_at]
    when String
      DateTime.parse(post[:published_at])
    when Integer
      Time.at(post[:published_at] / 1000).utc.to_datetime
    end
  end

  def front_matter
    front_matter_hash = {
      'layout' => "post",
      'title'  => post[:title]
    }

    front_matter_hash['featured'] = true if post[:featured] == 1
    front_matter_hash['image'] = post[:image] if post[:image] != nil

    unless draft?
      front_matter_hash['date'] = date.strftime('%Y-%m-%d %H:%M:%S') if date
    end
    front_matter_hash['tags'] = tags if tags && !tags.empty?
    front_matter_hash
  end

  def slug
    post[:slug]
  end

  def tags
    if there_are_tags?
      post_tags = $json[:db].first[:data][:posts_tags].select do |pt|
        pt[:post_id] == post[:id]
      end
      tags_ids = post_tags.map { |pt| pt[:tag_id] }
      tags = $json[:db].first[:data][:tags].select do |t|
        tags_ids.include? t[:id]
      end
      tags.map { |t| t[:slug] }
    end
  end

  def full_body
    front_matter.to_yaml + "---\n\n" + markdown
  end

  def markdown
    if post[:markdown]
      post[:markdown]
    elsif post[:mobiledoc]
      mobiledoc = JSON.parse post[:mobiledoc], symbolize_names: true
      card = mobiledoc[:cards].find { |c| c.first == "card-markdown" }
      card.last[:markdown]
    else
      ""
    end
  end

  def basename
    if draft?
      "#{ slug }.markdown"
    else
      "#{ date.strftime('%Y-%m-%d') }-#{ slug }.markdown"
    end
  end
end

class PostRepository
  attr_reader :posts

  def initialize json
    @json = json
    @posts = data[:posts].map {|post_json| Post.new(post_json)}
    @tags = data[:tags]
    @posts_tags = data[:posts_tags]
  end

  def drafts
    @posts.select &:draft?
  end

  private

  def data
    @json[:data] ? @json[:data] : @json[:db].first[:data]
  end
end

repository = PostRepository.new($json)
repository.posts.map &:import

puts "#{ repository.posts.count } posts imported ( #{ repository.drafts.count } draft )"
